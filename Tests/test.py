import unittest
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from Solution.lyst import solveRunTime

class Test_random_time(unittest.TestCase):
    def test_solver(self):
        result = solveRunTime('16:10', 'Tests/cron_test.txt')
        self.assertEqual(result[0][0:5], '23:59')
        self.assertEqual(result[0][6:9], 'tod')
        self.assertEqual(result[1][0:5], '16:45')
        self.assertEqual(result[1][6:9], 'tod')
        self.assertEqual(result[2][0:5], '16:10')
        self.assertEqual(result[2][6:9], 'tod')
        self.assertEqual(result[3][0:5], '19:00')
        self.assertEqual(result[3][6:9], 'tod')
        self.assertEqual(result[4][0:5], '00:00')
        self.assertEqual(result[4][6:9], 'tom')
        self.assertEqual(result[5][0:5], '16:59')
        self.assertEqual(result[5][6:9], 'tod')
        self.assertEqual(result[6][0:5], '16:10')
        self.assertEqual(result[6][6:9], 'tod')
        self.assertEqual(result[7][0:5], '23:00')
        self.assertEqual(result[7][6:9], 'tod')

class Test_minute_before_midnight(unittest.TestCase):
    def test_solver(self):
        result = solveRunTime('23:59', 'Tests/cron_test.txt')
        self.assertEqual(result[0][0:5], '23:59')
        self.assertEqual(result[0][6:9], 'tod')
        self.assertEqual(result[1][0:5], '00:45')
        self.assertEqual(result[1][6:9], 'tom')
        self.assertEqual(result[2][0:5], '23:59')
        self.assertEqual(result[2][6:9], 'tod')
        self.assertEqual(result[3][0:5], '19:00')
        self.assertEqual(result[3][6:9], 'tom')
        self.assertEqual(result[4][0:5], '00:00')
        self.assertEqual(result[4][6:9], 'tom')
        self.assertEqual(result[5][0:5], '23:59')
        self.assertEqual(result[5][6:9], 'tod')
        self.assertEqual(result[6][0:5], '23:59')
        self.assertEqual(result[6][6:9], 'tod')
        self.assertEqual(result[7][0:5], '23:59')
        self.assertEqual(result[7][6:9], 'tod')
class Test_midnight(unittest.TestCase):
    def test_solver(self):
        result = solveRunTime('00:00', 'Tests/cron_test.txt')
        self.assertEqual(result[0][0:5], '23:59')
        self.assertEqual(result[0][6:9], 'tod')
        self.assertEqual(result[1][0:5], '00:45')
        self.assertEqual(result[1][6:9], 'tod')
        self.assertEqual(result[2][0:5], '00:00')
        self.assertEqual(result[2][6:9], 'tod')
        self.assertEqual(result[3][0:5], '19:00')
        self.assertEqual(result[3][6:9], 'tod')
        self.assertEqual(result[4][0:5], '00:00')
        self.assertEqual(result[4][6:9], 'tod')
        self.assertEqual(result[5][0:5], '00:59')
        self.assertEqual(result[5][6:9], 'tod')
        self.assertEqual(result[6][0:5], '00:00')
        self.assertEqual(result[6][6:9], 'tod')
        self.assertEqual(result[7][0:5], '23:00')
        self.assertEqual(result[7][6:9], 'tod')
class Test_minute_after_midnight(unittest.TestCase):
    def test_solver(self):
        result = solveRunTime('00:01', 'Tests/cron_test.txt')
        self.assertEqual(result[0][0:5], '23:59')
        self.assertEqual(result[0][6:9], 'tod')
        self.assertEqual(result[1][0:5], '00:45')
        self.assertEqual(result[1][6:9], 'tod')
        self.assertEqual(result[2][0:5], '00:01')
        self.assertEqual(result[2][6:9], 'tod')
        self.assertEqual(result[3][0:5], '19:00')
        self.assertEqual(result[3][6:9], 'tod')
        self.assertEqual(result[4][0:5], '00:00')
        self.assertEqual(result[4][6:9], 'tom')
        self.assertEqual(result[5][0:5], '00:59')
        self.assertEqual(result[5][6:9], 'tod')
        self.assertEqual(result[6][0:5], '00:01')
        self.assertEqual(result[6][6:9], 'tod')
        self.assertEqual(result[7][0:5], '23:00')
        self.assertEqual(result[7][6:9], 'tod')
if __name__ == '__main__':
    unittest.main()
